{"version":3,"sources":["audio/explosion.mp3","images/earth.jpg","images/moon.png","audio/laser.mp3","audio/engine.mp3","audio/engine2.mp3","audio/bg.mp3","audio/warp.mp3","audio/click.mp3","3d/Stars.js","3d/Planets.js","3d/Effects.js","audio/index.js","store.js","3d/Particles.js","3d/Enemies.js","3d/Rocks.js","3d/Explosions.js","3d/Rings.js","3d/Track.js","3d/Ship.js","3d/Rig.js","Hud.js","index.js"],"names":["module","exports","Stars","count","positions","useMemo","i","theta","Math","PI","random","phi","acos","x","cos","sin","y","z","push","Float32Array","attach","attachObject","length","array","itemSize","size","sizeAttenuation","color","fog","Planets","ref","useRef","useLoader","THREE","earthImg","moonImg","texture","moon","scale","position","args","map","roughness","distance","intensity","Effects","composer","useThree","scene","gl","camera","useEffect","current","setSize","width","height","useFrame","render","attachArray","undefined","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","FilmPass","mp3","explosion","explosionAudio","zap","Audio","zapAudio","engine","engineAudio","engine2","engine2Audio","bg","bgAudio","warp","warpAudio","click","clickAudio","guid","create","set","get","spline","Curves","GrannyKnot","track","cancelLaserTO","cancelExplosionTO","box","sound","points","health","lasers","explosions","rocks","randomData","enemies","mutation","t","startTime","Date","now","fov","hits","rings","randomRings","particles","looptime","binormal","normal","clock","mouse","dummy","ray","actions","init","start","toggleSound","addEffect","time","parameters","path","getPointAt","multiplyScalar","warping","playAudio","audio","r","filter","test","e","a","concat","previous","updates","data","state","clearTimeout","setTimeout","rock","find","enemy","shoot","updateMouse","clientX","clientY","window","innerWidth","innerHeight","min","copy","offset","max","expandByScalar","hit","result","intersectBox","origin","distanceTo","useStore","api","radius","Array","fill","pos","clone","add","speed","temp","pickt","tangents","pick","floor","lookAt","getLength","matrix","binormals","toArray","volume","loop","getState","currentTime","play","pause","Particles","instancedMesh","forEach","particle","rotation","updateMatrix","setMatrixAt","instanceMatrix","needsUpdate","frustumCulled","Enemies","Drone","key","setFromCenterAndSize","glowMaterial","React","memo","gltf","GLTFLoader","getElapsedTime","material","name","__$","geometry","Rocks","Rock","emissive","metalness","make","createRef","normalize","Explosions","Explosion","group","type","mesh","children","vec","opacity","index","transparent","side","Rings","f","onUpdate","self","quaternion","setFromRotationMatrix","Track","lightgreen","hotpink","laserMaterial","crossMaterial","direction","Ship","main","laserGroup","laserLight","exhaust","cross","target","getWorldPosition","getWorldDirection","negate","visible","renderOrder","Rig","rig","segments","pickNext","subVectors","dir","getTangentAt","updateProjectionMatrix","lightPos","Hud","toggle","seconds","setInterval","innerText","toFixed","clearInterval","score","UpperLeft","onClick","UpperRight","href","LowerLeft","Global","LowerRight","style","base","css","styled","div","createGlobalStyle","ReactDOM","concurrent","onPointerMove","near","far","onCreated","gammaInput","toneMapping","setClearColor","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.eda445d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/explosion.5c5ce697.mp3\";","module.exports = __webpack_public_path__ + \"static/media/earth.12d16034.jpg\";","module.exports = __webpack_public_path__ + \"static/media/moon.85e26bcf.png\";","module.exports = __webpack_public_path__ + \"static/media/laser.a97c8e67.mp3\";","module.exports = __webpack_public_path__ + \"static/media/engine.e896d081.mp3\";","module.exports = __webpack_public_path__ + \"static/media/engine2.bdb08091.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bg.a93d8e1a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/warp.5699f1c4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click.8d516cce.mp3\";","import React, { useMemo } from 'react'\n\nexport default function Stars({ count = 2000 }) {\n  const positions = useMemo(() => {\n    let positions = []\n    for (let i = 0; i < count; i++) {\n      const r = 4000\n      const theta = 2 * Math.PI * Math.random()\n      const phi = Math.acos(2 * Math.random() - 1)\n      const x = r * Math.cos(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const y = r * Math.sin(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const z = r * Math.cos(phi) + (-1000 + Math.random() * 2000)\n      positions.push(x)\n      positions.push(y)\n      positions.push(z)\n    }\n    return new Float32Array(positions)\n  }, [count])\n  return (\n    <points>\n      <bufferGeometry attach=\"geometry\">\n        <bufferAttribute attachObject={['attributes', 'position']} count={positions.length / 3} array={positions} itemSize={3} />\n      </bufferGeometry>\n      <pointsMaterial attach=\"material\" size={12.5} sizeAttenuation color=\"white\" fog={false} />\n    </points>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader } from 'react-three-fiber'\nimport earthImg from '../images/earth.jpg'\nimport moonImg from '../images/moon.png'\n\nexport default function Planets() {\n  const ref = useRef()\n  const [texture, moon] = useLoader(THREE.TextureLoader, [earthImg, moonImg])\n  return (\n    <group ref={ref} scale={[100, 100, 100]} position={[-500, -500, 1000]}>\n      <mesh>\n        <sphereBufferGeometry attach=\"geometry\" args={[5, 32, 32]} />\n        <meshStandardMaterial attach=\"material\" map={texture} roughness={1} fog={false} />\n      </mesh>\n      <mesh position={[5, -5, -5]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[0.75, 32, 32]} />\n        <meshStandardMaterial attach=\"material\" roughness={1} map={moon} fog={false} />\n      </mesh>\n      <pointLight position={[-5, -5, -5]} distance={1000} intensity={6} />\n      <mesh position={[-30, -10, -60]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#FFFF99\" fog={false} />\n        <pointLight distance={6100} intensity={50} color=\"white\" />\n      </mesh>\n    </group>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport { extend, useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass'\n\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass, FilmPass })\n\nexport default function Effects() {\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => composer.current.render(), 2)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <unrealBloomPass attachArray=\"passes\" args={[undefined, 1.6, 1, 0]} />\n      <filmPass attachArray=\"passes\" args={[0.05, 0.5, 1500, false]} />\n    </effectComposer>\n  )\n}\n","import zapAudio from './laser.mp3'\nimport engineAudio from './engine.mp3'\nimport engine2Audio from './engine2.mp3'\nimport bgAudio from './bg.mp3'\nimport warpAudio from './warp.mp3'\nimport clickAudio from './click.mp3'\nimport explosionAudio from './explosion.mp3'\n\nconst mp3 = { explosion: explosionAudio }\n\nconst zap = new Audio(zapAudio)\nconst engine = new Audio(engineAudio)\nconst engine2 = new Audio(engine2Audio)\nconst bg = new Audio(bgAudio)\nconst warp = new Audio(warpAudio)\nconst click = new Audio(clickAudio)\nconst explosion = new Audio(explosionAudio)\n\nexport { zap, engine, engine2, bg, warp, click, explosion, mp3 }\n","import * as THREE from 'three'\nimport { Curves } from 'three/examples/jsm/curves/CurveExtras'\nimport { addEffect } from 'react-three-fiber'\nimport create from 'zustand'\nimport * as audio from './audio'\n\nlet guid = 1\n\nconst [useStore, api] = create((set, get) => {\n  let spline = new Curves.GrannyKnot()\n  let track = new THREE.TubeBufferGeometry(spline, 250, 0.2, 10, true)\n  let cancelLaserTO = undefined\n  let cancelExplosionTO = undefined\n  const box = new THREE.Box3()\n\n  return {\n    sound: false,\n    camera: undefined,\n    points: 0,\n    health: 100,\n    lasers: [],\n    explosions: [],\n    rocks: randomData(100, track, 150, 8, () => 1 + Math.random() * 2.5),\n    enemies: randomData(10, track, 20, 15, 1),\n\n    mutation: {\n      t: 0,\n      position: new THREE.Vector3(),\n      startTime: Date.now(),\n\n      track,\n      scale: 15,\n      fov: 70,\n      hits: false,\n      rings: randomRings(30, track),\n      particles: randomData(2500, track, 100, 1, () => 0.5 + Math.random() * 0.8),\n      looptime: 40 * 1000,\n      binormal: new THREE.Vector3(),\n      normal: new THREE.Vector3(),\n      clock: new THREE.Clock(false),\n      mouse: new THREE.Vector2(-250, 50),\n\n      // Re-usable objects\n      dummy: new THREE.Object3D(),\n      ray: new THREE.Ray(),\n      box: new THREE.Box3()\n    },\n\n    actions: {\n      init(camera) {\n        const { mutation, actions } = get()\n\n        set({ camera })\n        mutation.clock.start()\n        actions.toggleSound(get().sound)\n\n        addEffect(() => {\n          const { rocks, enemies } = get()\n\n          const time = Date.now()\n          const t = (mutation.t = ((time - mutation.startTime) % mutation.looptime) / mutation.looptime)\n          mutation.position = track.parameters.path.getPointAt(t)\n          mutation.position.multiplyScalar(mutation.scale)\n\n          // test for wormhole/warp\n          let warping = false\n          if (t > 0.3 && t < 0.4) {\n            if (!warping) {\n              warping = true\n              playAudio(audio.warp)\n            }\n          } else if (t > 0.5) warping = false\n\n          // test for hits\n          const r = rocks.filter(actions.test)\n          const e = enemies.filter(actions.test)\n          const a = r.concat(e)\n          const previous = mutation.hits\n          mutation.hits = a.length\n          if (previous === 0 && mutation.hits) playAudio(audio.click)\n          const lasers = get().lasers\n          if (mutation.hits && lasers.length && time - lasers[lasers.length - 1] < 100) {\n            const updates = a.map(data => ({ time: Date.now(), ...data }))\n            set(state => ({ explosions: [...state.explosions, ...updates] }))\n            clearTimeout(cancelExplosionTO)\n            cancelExplosionTO = setTimeout(() => set(state => ({ explosions: state.explosions.filter(({ time }) => Date.now() - time <= 1000) })), 1000)\n            set(state => ({\n              points: state.points + r.length * 100 + e.length * 200,\n              rocks: state.rocks.filter(rock => !r.find(r => r.guid === rock.guid)),\n              enemies: state.enemies.filter(enemy => !e.find(e => e.guid === enemy.guid))\n            }))\n          }\n          //if (a.some(data => data.distance < 15)) set(state => ({ health: state.health - 1 }))\n        })\n      },\n      shoot() {\n        set(state => ({ lasers: [...state.lasers, Date.now()] }))\n        clearTimeout(cancelLaserTO)\n        cancelLaserTO = setTimeout(() => set(state => ({ lasers: state.lasers.filter(t => Date.now() - t <= 1000) })), 1000)\n        playAudio(audio.zap, 0.5)\n      },\n      toggleSound(sound = !get().sound) {\n        set({ sound })\n        playAudio(audio.engine, 1, true)\n        playAudio(audio.engine2, 0.3, true)\n        playAudio(audio.bg, 1, true)\n      },\n      updateMouse({ clientX: x, clientY: y }) {\n        get().mutation.mouse.set(x - window.innerWidth / 2, y - window.innerHeight / 2)\n      },\n      test(data) {\n        box.min.copy(data.offset)\n        box.max.copy(data.offset)\n        box.expandByScalar(data.size * data.scale)\n        data.hit.set(10000, 10000, 10000)\n        const result = get().mutation.ray.intersectBox(box, data.hit)\n        data.distance = get().mutation.ray.origin.distanceTo(data.hit)\n        return result\n      }\n    }\n  }\n})\n\nfunction randomData(count, track, radius, size, scale) {\n  return new Array(count).fill().map(() => {\n    const t = Math.random()\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const offset = pos\n      .clone()\n      .add(new THREE.Vector3(-radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2))\n    const speed = 0.1 + Math.random()\n    return { guid: guid++, scale: typeof scale === 'function' ? scale() : scale, size, offset, pos, speed, radius, t, hit: new THREE.Vector3(), distance: 1000 }\n  })\n}\n\nfunction randomRings(count, track) {\n  let temp = []\n  let t = 0.4\n  for (let i = 0; i < count; i++) {\n    t += 0.003\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const lookAt = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(15)\n    const matrix = new THREE.Matrix4().lookAt(pos, lookAt, track.binormals[pick])\n    temp.push([pos.toArray(), matrix])\n  }\n  return temp\n}\n\nfunction playAudio(audio, volume = 1, loop = false) {\n  if (api.getState().sound) {\n    audio.currentTime = 0\n    audio.volume = volume\n    audio.loop = loop\n    audio.play()\n  } else audio.pause()\n}\n\nexport default useStore\nexport { audio, playAudio }\n","import React, { useRef, useEffect } from 'react'\nimport useStore from '../store'\n\nexport default function Particles() {\n  const instancedMesh = useRef()\n  const { particles, dummy } = useStore(state => state.mutation)\n\n  useEffect(() => {\n    particles.forEach((particle, i) => {\n      const { offset, scale } = particle\n      dummy.position.copy(offset)\n      dummy.scale.set(scale, scale, scale)\n      dummy.rotation.set(Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI)\n      dummy.updateMatrix()\n      instancedMesh.current.setMatrixAt(i, dummy.matrix)\n    })\n    instancedMesh.current.instanceMatrix.needsUpdate = true\n  }, [])\n\n  return (\n    <instancedMesh ref={instancedMesh} args={[null, null, particles.length]} frustumCulled={false}>\n      <coneBufferGeometry attach=\"geometry\" args={[2, 2, 3]} />\n      <meshStandardMaterial attach=\"material\" color=\"#606060\" />\n    </instancedMesh>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nexport default function Enemies() {\n  const enemies = useStore(state => state.enemies)\n  return enemies.map((data, i) => <Drone key={i} data={data} />)\n}\n\nconst box = new THREE.Box3()\nbox.setFromCenterAndSize(new THREE.Vector3(0, 0, 1), new THREE.Vector3(3, 3, 3))\nconst glowMaterial = new THREE.MeshBasicMaterial({ color: new THREE.Color('lightblue') })\n\nconst Drone = React.memo(({ data }) => {\n  const { clock } = useStore(state => state.mutation)\n  const gltf = useLoader(GLTFLoader, '/drone.gltf')\n  const ref = useRef()\n\n  useFrame(() => {\n    const r = Math.cos((clock.getElapsedTime() / 2) * data.speed) * Math.PI\n    ref.current.position.copy(data.offset)\n    ref.current.rotation.set(r, r, r)\n  })\n\n  return (\n    <group ref={ref} scale={[5, 5, 5]}>\n      <mesh position={[0, 0, 50]} rotation={[Math.PI / 2, 0, 0]} material={glowMaterial}>\n        <cylinderBufferGeometry attach=\"geometry\" args={[0.25, 0.25, 100, 4]} />\n      </mesh>\n      <mesh name=\"Sphere_DroneGlowmat_0\">\n        <bufferGeometry attach=\"geometry\" {...gltf.__$[7].geometry} />\n        <meshStandardMaterial attach=\"material\" {...gltf.__$[7].material} name=\"DroneGlowmat\" />\n      </mesh>\n      <mesh name=\"Sphere_Body_0\" material={glowMaterial}>\n        <bufferGeometry attach=\"geometry\" {...gltf.__$[8].geometry} />\n        <meshStandardMaterial attach=\"material\" {...gltf.__$[8].material} name=\"Body\" />\n      </mesh>\n    </group>\n  )\n})\n","import React, { useRef } from 'react'\nimport { useFrame, useLoader } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nexport default function Rocks() {\n  const gltf = useLoader(GLTFLoader, '/rock.gltf')\n  const rocks = useStore(state => state.rocks)\n  return rocks.map(data => <Rock gltf={gltf} key={data.guid} data={data} />)\n}\n\nconst Rock = React.memo(({ gltf, data }) => {\n  const ref = useRef()\n  const { clock } = useStore(state => state.mutation)\n  useFrame(() => {\n    const r = Math.cos((clock.getElapsedTime() / 2) * data.speed) * Math.PI\n    ref.current.rotation.set(r, r, r)\n  })\n  return (\n    <group ref={ref} position={data.offset} scale={[data.scale, data.scale, data.scale]}>\n      <object3D\n        position={[-0.016298329457640648, -0.012838120572268963, 0.24073271453380585]}\n        rotation={[3.0093872578726644, 0.27444228385461117, -0.22745113653772078]}\n        scale={[20, 20, 20]}>\n        <mesh>\n          <bufferGeometry attach=\"geometry\" {...gltf.__$[7].geometry} />\n          <meshStandardMaterial attach=\"material\" {...gltf.__$[7].material} color=\"white\" emissive=\"black\" roughness={1} metalness={1} />\n        </mesh>\n      </object3D>\n    </group>\n  )\n})\n","import * as THREE from 'three'\nimport React, { useRef, useMemo, useEffect } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport useStore, { audio, playAudio } from '../store'\n\nfunction make(color, speed) {\n  return {\n    ref: React.createRef(),\n    color,\n    data: new Array(20)\n      .fill()\n      .map(() => [\n        new THREE.Vector3(),\n        new THREE.Vector3(-1 + Math.random() * 2, -1 + Math.random() * 2, -1 + Math.random() * 2).normalize().multiplyScalar(speed * 0.75)\n      ])\n  }\n}\n\nexport default function Explosions() {\n  const explosions = useStore(state => state.explosions)\n  return explosions.map(({ guid, offset, scale }) => <Explosion key={guid} position={offset} scale={scale * 0.75} />)\n}\n\nfunction Explosion({ position, scale }) {\n  const group = useRef()\n  const { dummy } = useStore(state => state.mutation)\n  const particles = useMemo(() => [make('white', 0.8), make('orange', 0.6)], [])\n\n  useEffect(() => void playAudio(new Audio(audio.mp3.explosion), 0.5), [])\n\n  useFrame(() => {\n    particles.forEach(({ data }, type) => {\n      const mesh = group.current.children[type]\n      data.forEach(([vec, normal], i) => {\n        vec.add(normal)\n        dummy.position.copy(vec)\n        dummy.updateMatrix()\n        mesh.setMatrixAt(i, dummy.matrix)\n      })\n      mesh.material.opacity -= 0.025\n      mesh.instanceMatrix.needsUpdate = true\n    })\n  })\n\n  return (\n    <group ref={group} position={position} scale={[scale, scale, scale]}>\n      {particles.map(({ color, data }, index) => (\n        <instancedMesh key={index} args={[null, null, data.length]} frustumCulled={false}>\n          <dodecahedronBufferGeometry attach=\"geometry\" args={[10, 0]} />\n          <meshBasicMaterial attach=\"material\" color={color} transparent opacity={1} fog={false} />\n        </instancedMesh>\n      ))}\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React from 'react'\nimport useStore from '../store'\n\nconst geometry = new THREE.RingBufferGeometry(1, 1.01, 64)\nconst material = new THREE.MeshBasicMaterial({ color: new THREE.Color('lightgreen'), side: THREE.DoubleSide })\n\nexport default function Rings() {\n  const { rings } = useStore(state => state.mutation)\n  return rings.map(([pos, matrix], i) => {\n    const f = (Math.sin(i / 10) * Math.PI) / 2\n    return (\n      <mesh\n        key={i}\n        position={pos}\n        scale={[30 + i * 5 * f, 30 + i * 5 * f, 30 + i * 5 * f]}\n        onUpdate={self => self.quaternion.setFromRotationMatrix(matrix)}\n        geometry={geometry}\n        material={material}\n      />\n    )\n  })\n}\n","import React from 'react'\nimport useStore from '../store'\n\nexport default function Track() {\n  const { scale, track } = useStore(state => state.mutation)\n  return (\n    <mesh scale={[scale, scale, scale]} geometry={track}>\n      <meshBasicMaterial attach=\"material\" color=\"indianred\" />\n    </mesh>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship() {\n  const gltf = useLoader(GLTFLoader, '/ship.gltf')\n  const mutation = useStore(state => state.mutation)\n  const { clock, mouse, ray } = mutation\n  const lasers = useStore(state => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  useFrame(() => {\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.1\n    main.current.rotation.z += (mouse.x / 500 - main.current.rotation.z) * 0.1\n    main.current.rotation.x += (-mouse.y / 1200 - main.current.rotation.x) * 0.1\n    main.current.rotation.y += (-mouse.x / 1200 - main.current.rotation.y) * 0.1\n    main.current.position.x += (mouse.x / 10 - main.current.position.x) * 0.1\n    main.current.position.y += (25 + -mouse.y / 10 - main.current.position.y) * 0.1\n    exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    for (let i = 0; i < lasers.length; i++) {\n      const group = laserGroup.current.children[i]\n      group.position.z -= 20\n    }\n    laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = mutation.hits ? lightgreen : hotpink\n    cross.current.visible = !mutation.hits\n    target.current.visible = !!mutation.hits\n  })\n\n  return (\n    <group ref={main}>\n      <group scale={[3.5, 3.5, 3.5]}>\n        <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxBufferGeometry attach=\"geometry\" args={[20, 2, 2]} />\n          </mesh>\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxBufferGeometry attach=\"geometry\" args={[2, 20, 2]} />\n          </mesh>\n        </group>\n        <group ref={target} position={[0, 0, -300]} name=\"target\">\n          <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxBufferGeometry attach=\"geometry\" args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxBufferGeometry attach=\"geometry\" args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxBufferGeometry attach=\"geometry\" args={[2, 40, 2]} />\n          </mesh>\n          <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxBufferGeometry attach=\"geometry\" args={[2, 40, 2]} />\n          </mesh>\n        </group>\n        <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" />\n        <group ref={laserGroup}>\n          {lasers.map((t, i) => (\n            <group key={i}>\n              <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n            </group>\n          ))}\n        </group>\n        <group rotation={[Math.PI / 2, Math.PI, 0]}>\n          <mesh name=\"Renault_(S,_T1)_0\">\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[5].geometry} />\n            <meshStandardMaterial attach=\"material\" color=\"#070707\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_1\">\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[6].geometry} />\n            <meshStandardMaterial attach=\"material\" color=\"black\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_2\">\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[7].geometry} />\n            <meshStandardMaterial attach=\"material\" color=\"#070707\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_3\">\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[8].geometry} />\n            <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_4\">\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[9].geometry} />\n            <meshBasicMaterial attach=\"material\" color=\"white\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_5\">\n            <bufferGeometry attach=\"geometry\" {...gltf.__$[10].geometry} />\n            <meshBasicMaterial attach=\"material\" color=\"teal\" />\n          </mesh>\n        </group>\n      </group>\n      <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n        <dodecahedronBufferGeometry attach=\"geometry\" args={[1.5, 0]} />\n        <meshBasicMaterial attach=\"material\" color=\"lightblue\" />\n      </mesh>\n    </group>\n  )\n}\n","import React, { useRef } from 'react'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport useStore from '../store'\n\nlet offset = 0\nexport default function Rig({ children }) {\n  const group = useRef()\n  const rig = useRef()\n  const mutation = useStore(state => state.mutation)\n  const { fov, scale, binormal, normal, track, mouse } = mutation\n  const { camera } = useThree()\n\n  useFrame(() => {\n    const t = mutation.t\n    const pos = mutation.position.clone()\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const pickNext = (pick + 1) % segments\n    binormal.subVectors(track.binormals[pickNext], track.binormals[pick])\n    binormal.multiplyScalar(pickt - pick).add(track.binormals[pick])\n    const dir = track.parameters.path.getTangentAt(t)\n    offset += (Math.max(15, 15 + -mouse.y / 20) - offset) * 0.05\n    normal.copy(binormal).cross(dir)\n    pos.add(normal.clone().multiplyScalar(offset))\n    camera.position.copy(pos)\n    const lookAt = track.parameters.path.getPointAt((t + 30 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    camera.matrix.lookAt(camera.position, lookAt, normal)\n    camera.quaternion.setFromRotationMatrix(camera.matrix)\n    camera.fov += ((t > 0.4 && t < 0.45 ? 120 : fov) - camera.fov) * 0.05\n    camera.updateProjectionMatrix()\n    const lightPos = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    group.current.position.copy(lightPos)\n    group.current.quaternion.setFromRotationMatrix(camera.matrix)\n  })\n\n  return (\n    <group ref={group}>\n      <pointLight distance={400} position={[0, 100, -420]} intensity={5} color=\"indianred\" />\n      <group ref={rig} position={[0, 0, -50]}>\n        {children}\n      </group>\n    </group>\n  )\n}\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport styled, { css, createGlobalStyle } from 'styled-components'\nimport useStore from './store'\n\nexport default function Hud() {\n  const points = useStore(state => state.points)\n  const health = useStore(state => state.health)\n  const sound = useStore(state => state.sound)\n  const toggle = useStore(state => state.actions.toggleSound)\n\n  const seconds = useRef()\n  useEffect(() => {\n    const t = Date.now()\n    const i = setInterval(() => (seconds.current.innerText = ((Date.now() - t) / 1000).toFixed(1)), 100)\n    return () => clearInterval(i)\n  }, [])\n\n  const score = useMemo(() => (points >= 1000 ? (points / 1000).toFixed(1) + 'K' : points), [points])\n  return (\n    <>\n      <UpperLeft onClick={() => toggle()}>\n        sound\n        <br />\n        {sound ? 'off' : 'on'}\n      </UpperLeft>\n      <UpperRight>\n        <a href=\"https://codesandbox.io/s/react-three-fiber-untitled-game-4pp5r\">source</a>\n        <br />\n        <a href=\"https://twitter.com/0xca0a\">twitter</a>\n        <br />\n        <a href=\"https://github.com/react-spring/react-three-fiber\">github</a>\n      </UpperRight>\n      <LowerLeft>\n        <h2 ref={seconds}>0.0</h2>\n        <h1>{score}</h1>\n      </LowerLeft>\n      <Global />\n      <LowerRight>\n        <div style={{ width: health + '%' }} />\n      </LowerRight>\n    </>\n  )\n}\n\nconst base = css`\n  font-family: 'Teko', sans-serif;\n  position: absolute;\n  text-transform: uppercase;\n  font-weight: 900;\n  font-variant-numeric: slashed-zero tabular-nums;\n  line-height: 1em;\n  pointer-events: none;\n  color: indianred;\n`\n\nconst UpperLeft = styled.div`\n  ${base}\n  top: 40px;\n  left: 50px;\n  font-size: 2em;\n  transform: skew(5deg, 10deg);\n  pointer-events: all;\n  cursor: pointer;\n  @media only screen and (max-width: 900px) {\n    font-size: 1.5em;\n  }\n`\n\nconst UpperRight = styled.div`\n  ${base}\n  text-align: right;\n  top: 40px;\n  right: 50px;\n  font-size: 2em;\n  transform: skew(-5deg, -10deg);\n  pointer-events: all;\n  cursor: pointer;\n  & > a {\n    color: indianred;\n    text-decoration: none;\n  }\n  @media only screen and (max-width: 900px) {\n    font-size: 1.5em;\n  }\n`\n\nconst LowerLeft = styled.div`\n  ${base}\n  bottom: 5px;\n  left: 50px;\n  transform: skew(-5deg, -10deg);\n  width: 200px;\n  & > h1 {\n    margin: 0;\n    font-size: 14em;\n    line-height: 1em;\n  }\n  & > h2 {\n    margin: 0;\n    font-size: 4em;\n    line-height: 1em;\n  }\n  @media only screen and (max-width: 900px) {\n    bottom: 30px;\n    & > h1 {\n      font-size: 6em !important;\n    }\n    & > h2 {\n      font-size: 3em !important;\n    }\n  }\n`\n\nconst LowerRight = styled.div`\n  ${base}\n  bottom: 70px;\n  right: 50px;\n  transform: skew(5deg, 10deg);\n  height: 60px;\n  width: 200px;\n  background: black;\n  & > div {\n    height: 100%;\n    background: indianred;\n  }\n\n  @media only screen and (max-width: 900px) {\n    bottom: 50px;\n    height: 40px;\n    width: 150px;\n  }\n`\n\nconst Global = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  html,\n  body,\n  #root {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    user-select: none;\n    overflow: hidden;\n  }\n\n  #root {\n    overflow: auto;\n    padding: 0px;\n  }\n\n  body {\n    position: fixed;\n    overflow: hidden;\n    overscroll-behavior-y: none;\n    font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif;\n    color: black;\n    background: white;\n  }\n`\n","import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport Stars from './3d/Stars'\nimport Planets from './3d/Planets'\nimport Effects from './3d/Effects'\nimport Particles from './3d/Particles'\nimport Enemies from './3d/Enemies'\nimport Rocks from './3d/Rocks'\nimport Explosions from './3d/Explosions'\nimport Rings from './3d/Rings'\nimport Track from './3d/Track'\nimport Ship from './3d/Ship'\nimport Rig from './3d/Rig'\nimport Hud from './Hud'\nimport useStore from './store'\n\nfunction App() {\n  const { fov } = useStore(state => state.mutation)\n  const actions = useStore(state => state.actions)\n  return (\n    <>\n      <Canvas\n        concurrent\n        onPointerMove={actions.updateMouse}\n        onClick={actions.shoot}\n        camera={{ position: [0, 0, 2000], near: 0.01, far: 10000, fov }}\n        onCreated={({ gl, camera }) => {\n          actions.init(camera)\n          gl.gammaInput = true\n          gl.toneMapping = THREE.Uncharted2ToneMapping\n          gl.setClearColor(new THREE.Color('#020207'))\n        }}>\n        <fog attach=\"fog\" args={['black', 100, 700]} />\n        <ambientLight intensity={0.25} />\n        <Stars />\n        <Explosions />\n        <Track />\n        <Particles />\n        <Rings />\n        <Suspense fallback={null}>\n          <Rocks />\n          <Planets />\n          <Enemies />\n          <Rig>\n            <Ship />\n          </Rig>\n        </Suspense>\n        <Effects />\n      </Canvas>\n      <Hud />\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}